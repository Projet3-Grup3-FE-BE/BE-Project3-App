// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "be_project3team3/feature/user/domain"

<<<<<<< HEAD
=======
	echo "github.com/labstack/echo/v4"

>>>>>>> order, fix, s3
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *Service) Delete(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenerateToken provides a mock function with given fields: id
func (_m *Service) GenerateToken(id uint) string {
	ret := _m.Called(id)

	var r0 string
	if rf, ok := ret.Get(0).(func(uint) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetMe provides a mock function with given fields: ID
func (_m *Service) GetMe(ID uint) (domain.Core, error) {
	ret := _m.Called(ID)

	var r0 domain.Core
	if rf, ok := ret.Get(0).(func(uint) domain.Core); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Get(0).(domain.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: getuserdata
func (_m *Service) GetUser(getuserdata domain.Core) (domain.Core, error) {
	ret := _m.Called(getuserdata)

	var r0 domain.Core
	if rf, ok := ret.Get(0).(func(domain.Core) domain.Core); ok {
		r0 = rf(getuserdata)
	} else {
		r0 = ret.Get(0).(domain.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Core) error); ok {
		r1 = rf(getuserdata)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginUser provides a mock function with given fields: newUser
func (_m *Service) LoginUser(newUser domain.Core) (domain.Core, error) {
	ret := _m.Called(newUser)

	var r0 domain.Core
	if rf, ok := ret.Get(0).(func(domain.Core) domain.Core); ok {
		r0 = rf(newUser)
	} else {
		r0 = ret.Get(0).(domain.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Core) error); ok {
		r1 = rf(newUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

<<<<<<< HEAD
// Register provides a mock function with given fields: newUser
func (_m *Service) Register(newUser domain.Core) (domain.Core, error) {
	ret := _m.Called(newUser)

	var r0 domain.Core
	if rf, ok := ret.Get(0).(func(domain.Core) domain.Core); ok {
		r0 = rf(newUser)
=======
// Register provides a mock function with given fields: newUser, c
func (_m *Service) Register(newUser domain.Core, c echo.Context) (domain.Core, error) {
	ret := _m.Called(newUser, c)

	var r0 domain.Core
	if rf, ok := ret.Get(0).(func(domain.Core, echo.Context) domain.Core); ok {
		r0 = rf(newUser, c)
>>>>>>> order, fix, s3
	} else {
		r0 = ret.Get(0).(domain.Core)
	}

	var r1 error
<<<<<<< HEAD
	if rf, ok := ret.Get(1).(func(domain.Core) error); ok {
		r1 = rf(newUser)
=======
	if rf, ok := ret.Get(1).(func(domain.Core, echo.Context) error); ok {
		r1 = rf(newUser, c)
>>>>>>> order, fix, s3
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProfile provides a mock function with given fields: updateData
func (_m *Service) UpdateProfile(updateData domain.Core) (domain.Core, error) {
	ret := _m.Called(updateData)

	var r0 domain.Core
	if rf, ok := ret.Get(0).(func(domain.Core) domain.Core); ok {
		r0 = rf(updateData)
	} else {
		r0 = ret.Get(0).(domain.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Core) error); ok {
		r1 = rf(updateData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
